package structs

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Cap) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			err = z.Name.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "host":
			err = z.Host.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "process":
			z.Process, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Process")
				return
			}
		case "provider":
			z.Provider, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Provider")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Cap) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "name"
	err = en.Append(0x84, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Name.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "host"
	err = en.Append(0xa4, 0x68, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = z.Host.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// write "process"
	err = en.Append(0xa7, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Process)
	if err != nil {
		err = msgp.WrapError(err, "Process")
		return
	}
	// write "provider"
	err = en.Append(0xa8, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Provider)
	if err != nil {
		err = msgp.WrapError(err, "Provider")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Cap) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "name"
	o = append(o, 0x84, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o, err = z.Name.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// string "host"
	o = append(o, 0xa4, 0x68, 0x6f, 0x73, 0x74)
	o, err = z.Host.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// string "process"
	o = append(o, 0xa7, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73)
	o = msgp.AppendUint32(o, z.Process)
	// string "provider"
	o = append(o, 0xa8, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72)
	o = msgp.AppendUint32(o, z.Provider)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cap) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			bts, err = z.Name.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "host":
			bts, err = z.Host.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "process":
			z.Process, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Process")
				return
			}
		case "provider":
			z.Provider, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Provider")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Cap) Msgsize() (s int) {
	s = 1 + 5 + z.Name.Msgsize() + 5 + z.Host.Msgsize() + 8 + msgp.Uint32Size + 9 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Entry) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Entry, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Entry) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Entry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(Entry, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Entry) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ListDirReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "base":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Abs")
				return
			}
			if cap(z.Abs) >= int(zb0002) {
				z.Abs = (z.Abs)[:zb0002]
			} else {
				z.Abs = make([]string, zb0002)
			}
			for za0001 := range z.Abs {
				z.Abs[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Abs", za0001)
					return
				}
			}
		case "path":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
			if cap(z.Path) >= int(zb0003) {
				z.Path = (z.Path)[:zb0003]
			} else {
				z.Path = make([]string, zb0003)
			}
			for za0002 := range z.Path {
				z.Path[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Path", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ListDirReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "base"
	err = en.Append(0x82, 0xa4, 0x62, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Abs)))
	if err != nil {
		err = msgp.WrapError(err, "Abs")
		return
	}
	for za0001 := range z.Abs {
		err = en.WriteString(z.Abs[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Abs", za0001)
			return
		}
	}
	// write "path"
	err = en.Append(0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Path)))
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	for za0002 := range z.Path {
		err = en.WriteString(z.Path[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Path", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ListDirReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "base"
	o = append(o, 0x82, 0xa4, 0x62, 0x61, 0x73, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Abs)))
	for za0001 := range z.Abs {
		o = msgp.AppendString(o, z.Abs[za0001])
	}
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Path)))
	for za0002 := range z.Path {
		o = msgp.AppendString(o, z.Path[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ListDirReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "base":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Abs")
				return
			}
			if cap(z.Abs) >= int(zb0002) {
				z.Abs = (z.Abs)[:zb0002]
			} else {
				z.Abs = make([]string, zb0002)
			}
			for za0001 := range z.Abs {
				z.Abs[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Abs", za0001)
					return
				}
			}
		case "path":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
			if cap(z.Path) >= int(zb0003) {
				z.Path = (z.Path)[:zb0003]
			} else {
				z.Path = make([]string, zb0003)
			}
			for za0002 := range z.Path {
				z.Path[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Path", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ListDirReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Abs {
		s += msgp.StringPrefixSize + len(z.Abs[za0001])
	}
	s += 5 + msgp.ArrayHeaderSize
	for za0002 := range z.Path {
		s += msgp.StringPrefixSize + len(z.Path[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ListDirRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "error":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
				z.Error = nil
			} else {
				if z.Error == nil {
					z.Error = new(Error)
				}
				err = z.Error.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
			}
		case "entries":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Entires")
				return
			}
			if z.Entires == nil {
				z.Entires = make(map[string]Entry, zb0002)
			} else if len(z.Entires) > 0 {
				for key := range z.Entires {
					delete(z.Entires, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 Entry
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Entires")
					return
				}
				var zb0003 uint32
				zb0003, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "Entires", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make(Entry, zb0003)
				}
				for za0003 := range za0002 {
					err = za0002[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Entires", za0001, za0003)
						return
					}
				}
				z.Entires[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ListDirRes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "error"
	err = en.Append(0x82, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	if z.Error == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Error.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Error")
			return
		}
	}
	// write "entries"
	err = en.Append(0xa7, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Entires)))
	if err != nil {
		err = msgp.WrapError(err, "Entires")
		return
	}
	for za0001, za0002 := range z.Entires {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Entires")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0002)))
		if err != nil {
			err = msgp.WrapError(err, "Entires", za0001)
			return
		}
		for za0003 := range za0002 {
			err = za0002[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Entires", za0001, za0003)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ListDirRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "error"
	o = append(o, 0x82, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if z.Error == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Error.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Error")
			return
		}
	}
	// string "entries"
	o = append(o, 0xa7, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Entires)))
	for za0001, za0002 := range z.Entires {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendArrayHeader(o, uint32(len(za0002)))
		for za0003 := range za0002 {
			o, err = za0002[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Entires", za0001, za0003)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ListDirRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "error":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Error = nil
			} else {
				if z.Error == nil {
					z.Error = new(Error)
				}
				bts, err = z.Error.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
			}
		case "entries":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Entires")
				return
			}
			if z.Entires == nil {
				z.Entires = make(map[string]Entry, zb0002)
			} else if len(z.Entires) > 0 {
				for key := range z.Entires {
					delete(z.Entires, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 Entry
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Entires")
					return
				}
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Entires", za0001)
					return
				}
				if cap(za0002) >= int(zb0003) {
					za0002 = (za0002)[:zb0003]
				} else {
					za0002 = make(Entry, zb0003)
				}
				for za0003 := range za0002 {
					bts, err = za0002[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Entires", za0001, za0003)
						return
					}
				}
				z.Entires[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ListDirRes) Msgsize() (s int) {
	s = 1 + 6
	if z.Error == nil {
		s += msgp.NilSize
	} else {
		s += z.Error.Msgsize()
	}
	s += 8 + msgp.MapHeaderSize
	if z.Entires != nil {
		for za0001, za0002 := range z.Entires {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.ArrayHeaderSize
			for za0003 := range za0002 {
				s += za0002[za0003].Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SetDirReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "base":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Abs")
				return
			}
			if cap(z.Abs) >= int(zb0002) {
				z.Abs = (z.Abs)[:zb0002]
			} else {
				z.Abs = make([]string, zb0002)
			}
			for za0001 := range z.Abs {
				z.Abs[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Abs", za0001)
					return
				}
			}
		case "path":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
			if cap(z.Path) >= int(zb0003) {
				z.Path = (z.Path)[:zb0003]
			} else {
				z.Path = make([]string, zb0003)
			}
			for za0002 := range z.Path {
				z.Path[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Path", za0002)
					return
				}
			}
		case "option":
			z.Option, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Option")
				return
			}
		case "item":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Item")
					return
				}
				z.Item = nil
			} else {
				if z.Item == nil {
					z.Item = new(Transfer)
				}
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Item")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Item")
						return
					}
					switch msgp.UnsafeString(field) {
					case "sub_type":
						z.Item.SubType, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Item", "SubType")
							return
						}
					case "desc":
						z.Item.Desc, err = dc.ReadBytes(z.Item.Desc)
						if err != nil {
							err = msgp.WrapError(err, "Item", "Desc")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Item")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SetDirReq) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.Item == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "base"
	err = en.Append(0xa4, 0x62, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Abs)))
	if err != nil {
		err = msgp.WrapError(err, "Abs")
		return
	}
	for za0001 := range z.Abs {
		err = en.WriteString(z.Abs[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Abs", za0001)
			return
		}
	}
	// write "path"
	err = en.Append(0xa4, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Path)))
	if err != nil {
		err = msgp.WrapError(err, "Path")
		return
	}
	for za0002 := range z.Path {
		err = en.WriteString(z.Path[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Path", za0002)
			return
		}
	}
	// write "option"
	err = en.Append(0xa6, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Option)
	if err != nil {
		err = msgp.WrapError(err, "Option")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// write "item"
		err = en.Append(0xa4, 0x69, 0x74, 0x65, 0x6d)
		if err != nil {
			return
		}
		if z.Item == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "sub_type"
			err = en.Append(0x82, 0xa8, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Item.SubType)
			if err != nil {
				err = msgp.WrapError(err, "Item", "SubType")
				return
			}
			// write "desc"
			err = en.Append(0xa4, 0x64, 0x65, 0x73, 0x63)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Item.Desc)
			if err != nil {
				err = msgp.WrapError(err, "Item", "Desc")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SetDirReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.Item == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "base"
	o = append(o, 0xa4, 0x62, 0x61, 0x73, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Abs)))
	for za0001 := range z.Abs {
		o = msgp.AppendString(o, z.Abs[za0001])
	}
	// string "path"
	o = append(o, 0xa4, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Path)))
	for za0002 := range z.Path {
		o = msgp.AppendString(o, z.Path[za0002])
	}
	// string "option"
	o = append(o, 0xa6, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendBool(o, z.Option)
	if (zb0001Mask & 0x8) == 0 { // if not omitted
		// string "item"
		o = append(o, 0xa4, 0x69, 0x74, 0x65, 0x6d)
		if z.Item == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "sub_type"
			o = append(o, 0x82, 0xa8, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendString(o, z.Item.SubType)
			// string "desc"
			o = append(o, 0xa4, 0x64, 0x65, 0x73, 0x63)
			o = msgp.AppendBytes(o, z.Item.Desc)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SetDirReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "base":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Abs")
				return
			}
			if cap(z.Abs) >= int(zb0002) {
				z.Abs = (z.Abs)[:zb0002]
			} else {
				z.Abs = make([]string, zb0002)
			}
			for za0001 := range z.Abs {
				z.Abs[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Abs", za0001)
					return
				}
			}
		case "path":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Path")
				return
			}
			if cap(z.Path) >= int(zb0003) {
				z.Path = (z.Path)[:zb0003]
			} else {
				z.Path = make([]string, zb0003)
			}
			for za0002 := range z.Path {
				z.Path[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Path", za0002)
					return
				}
			}
		case "option":
			z.Option, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Option")
				return
			}
		case "item":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Item = nil
			} else {
				if z.Item == nil {
					z.Item = new(Transfer)
				}
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Item")
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Item")
						return
					}
					switch msgp.UnsafeString(field) {
					case "sub_type":
						z.Item.SubType, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Item", "SubType")
							return
						}
					case "desc":
						z.Item.Desc, bts, err = msgp.ReadBytesBytes(bts, z.Item.Desc)
						if err != nil {
							err = msgp.WrapError(err, "Item", "Desc")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Item")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SetDirReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Abs {
		s += msgp.StringPrefixSize + len(z.Abs[za0001])
	}
	s += 5 + msgp.ArrayHeaderSize
	for za0002 := range z.Path {
		s += msgp.StringPrefixSize + len(z.Path[za0002])
	}
	s += 7 + msgp.BoolSize + 5
	if z.Item == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 9 + msgp.StringPrefixSize + len(z.Item.SubType) + 5 + msgp.BytesPrefixSize + len(z.Item.Desc)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SetDirRes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "error":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
				z.Error = nil
			} else {
				if z.Error == nil {
					z.Error = new(Error)
				}
				err = z.Error.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
			}
		case "item":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Item")
					return
				}
				z.Item = nil
			} else {
				if z.Item == nil {
					z.Item = new(Transfer)
				}
				var zb0002 uint32
				zb0002, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Item")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Item")
						return
					}
					switch msgp.UnsafeString(field) {
					case "sub_type":
						z.Item.SubType, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Item", "SubType")
							return
						}
					case "desc":
						z.Item.Desc, err = dc.ReadBytes(z.Item.Desc)
						if err != nil {
							err = msgp.WrapError(err, "Item", "Desc")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Item")
							return
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SetDirRes) EncodeMsg(en *msgp.Writer) (err error) {
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.Item == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "error"
	err = en.Append(0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	if z.Error == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Error.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Error")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// write "item"
		err = en.Append(0xa4, 0x69, 0x74, 0x65, 0x6d)
		if err != nil {
			return
		}
		if z.Item == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 2
			// write "sub_type"
			err = en.Append(0x82, 0xa8, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65)
			if err != nil {
				return
			}
			err = en.WriteString(z.Item.SubType)
			if err != nil {
				err = msgp.WrapError(err, "Item", "SubType")
				return
			}
			// write "desc"
			err = en.Append(0xa4, 0x64, 0x65, 0x73, 0x63)
			if err != nil {
				return
			}
			err = en.WriteBytes(z.Item.Desc)
			if err != nil {
				err = msgp.WrapError(err, "Item", "Desc")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SetDirRes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// check for omitted fields
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.Item == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "error"
	o = append(o, 0xa5, 0x65, 0x72, 0x72, 0x6f, 0x72)
	if z.Error == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Error.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Error")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not omitted
		// string "item"
		o = append(o, 0xa4, 0x69, 0x74, 0x65, 0x6d)
		if z.Item == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 2
			// string "sub_type"
			o = append(o, 0x82, 0xa8, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65)
			o = msgp.AppendString(o, z.Item.SubType)
			// string "desc"
			o = append(o, 0xa4, 0x64, 0x65, 0x73, 0x63)
			o = msgp.AppendBytes(o, z.Item.Desc)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SetDirRes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "error":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Error = nil
			} else {
				if z.Error == nil {
					z.Error = new(Error)
				}
				bts, err = z.Error.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Error")
					return
				}
			}
		case "item":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Item = nil
			} else {
				if z.Item == nil {
					z.Item = new(Transfer)
				}
				var zb0002 uint32
				zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Item")
					return
				}
				for zb0002 > 0 {
					zb0002--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Item")
						return
					}
					switch msgp.UnsafeString(field) {
					case "sub_type":
						z.Item.SubType, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Item", "SubType")
							return
						}
					case "desc":
						z.Item.Desc, bts, err = msgp.ReadBytesBytes(bts, z.Item.Desc)
						if err != nil {
							err = msgp.WrapError(err, "Item", "Desc")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Item")
							return
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SetDirRes) Msgsize() (s int) {
	s = 1 + 6
	if z.Error == nil {
		s += msgp.NilSize
	} else {
		s += z.Error.Msgsize()
	}
	s += 5
	if z.Item == nil {
		s += msgp.NilSize
	} else {
		s += 1 + 9 + msgp.StringPrefixSize + len(z.Item.SubType) + 5 + msgp.BytesPrefixSize + len(z.Item.Desc)
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Transfer) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sub_type":
			z.SubType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SubType")
				return
			}
		case "desc":
			z.Desc, err = dc.ReadBytes(z.Desc)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Transfer) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "sub_type"
	err = en.Append(0x82, 0xa8, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.SubType)
	if err != nil {
		err = msgp.WrapError(err, "SubType")
		return
	}
	// write "desc"
	err = en.Append(0xa4, 0x64, 0x65, 0x73, 0x63)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Desc)
	if err != nil {
		err = msgp.WrapError(err, "Desc")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Transfer) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "sub_type"
	o = append(o, 0x82, 0xa8, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.SubType)
	// string "desc"
	o = append(o, 0xa4, 0x64, 0x65, 0x73, 0x63)
	o = msgp.AppendBytes(o, z.Desc)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Transfer) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sub_type":
			z.SubType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubType")
				return
			}
		case "desc":
			z.Desc, bts, err = msgp.ReadBytesBytes(bts, z.Desc)
			if err != nil {
				err = msgp.WrapError(err, "Desc")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Transfer) Msgsize() (s int) {
	s = 1 + 9 + msgp.StringPrefixSize + len(z.SubType) + 5 + msgp.BytesPrefixSize + len(z.Desc)
	return
}
